Let's break down the Builder Pattern for house creation, demonstrating each component, from the interface definition to implementation, and finally object creation and usage.

1. Interface Definition:
This interface defines how the house should be built. It includes methods to specify the number of walls, doors, windows, and whether the house has a garage.

csharp
Copy code
public interface IHouseBuilder
{
    IHouseBuilder BuildWalls(int count);
    IHouseBuilder BuildDoors(int count);
    IHouseBuilder BuildWindows(int count);
    IHouseBuilder BuildGarage(bool hasGarage);
    House Build(); // Final step to return the built house object
}


2. Product Class (House):
This is the final object we want to create (the House). It has several properties that the builder will set during the creation process.

csharp
Copy code
public class House
{
    public int Walls { get; set; }
    public int Doors { get; set; }
    public int Windows { get; set; }
    public bool HasGarage { get; set; }

    public override string ToString()
    {
        return $"House with {Walls} walls, {Doors} doors, {Windows} windows, Garage: {HasGarage}";
    }
}



3. Concrete Builder Implementation:
This class implements the IHouseBuilder interface, providing the actual logic to build the House step-by-step.

csharp
Copy code
public class HouseBuilder : IHouseBuilder
{
    private House _house = new House(); // Create an empty house object

    public IHouseBuilder BuildWalls(int count)
    {
        _house.Walls = count;
        return this; // Return the builder itself to chain methods
    }

    public IHouseBuilder BuildDoors(int count)
    {
        _house.Doors = count;
        return this;
    }

    public IHouseBuilder BuildWindows(int count)
    {
        _house.Windows = count;
        return this;
    }

    public IHouseBuilder BuildGarage(bool hasGarage)
    {
        _house.HasGarage = hasGarage;
        return this;
    }

    public House Build()
    {
        return _house; // Return the fully built house object
    }
}




4. Client Code:
This is where we use the builder to create the House. The builder pattern is called in a step-by-step process to configure the house.

csharp
Copy code
public class Program
{
    public static void Main(string[] args)
    {
        // Create a builder for building the house
        HouseBuilder houseBuilder = new HouseBuilder();
        
        // Use the builder to construct a house with specific properties
        House house = houseBuilder
            .BuildWalls(10)
            .BuildDoors(5)
            .BuildWindows(3)
            .BuildGarage(true)
            .Build(); // Final step to return the built house object
        
        // Output the house details to the console
        Console.WriteLine(house.ToString());
    }
}


Explanation of Steps:
Interface (IHouseBuilder): Defines the steps required to build a house (walls, doors, windows, garage).
Concrete Builder (HouseBuilder): Implements the methods of the interface, allowing us to build the house step-by-step.
House Object: The product we are building. It will be returned after the builder completes all the steps.
Chaining Methods: The HouseBuilder returns this from each method to allow for chaining, so you can call multiple build steps in a single line.
Example Output:
python
Copy code
House with 10 walls, 5 doors, 3 windows, Garage: True
Key Advantages of Builder Pattern:
Readability: You can easily understand the creation process of the object by reading the chained methods.
Flexibility: You can build the object in different configurations (e.g., a house with or without a garage).
Separation of Concerns: The process of constructing the object is separate from its final representation.
This entire flow demonstrates how the Builder Pattern can be used for creating complex objects with many optional parameters in a flexible and readable manner.


